3Readers-WritersSEMAPHORE.sh


This script demonstrates how to manage concurrent access to a database file using file locking in Bash. We'll explore concepts like file locking mechanisms (flock), background processes, and simulating database operations.

Concepts and Commands:

flock command: Provides file locking mechanisms.
-x: Exclusive lock (prevents other processes from acquiring the lock until it's released).
-s: Shared lock (allows multiple processes to read the file concurrently, but prevents writing).
-u: Unlock the previously acquired lock.
<fd>: File descriptor (here, 200 is used as an arbitrary value).
Background processes (&): Started processes that run concurrently with the main script.
wait command: Waits for all background processes to finish before continuing.
Script Logic:

File Paths:

Defines the path to the lock file (database_lock) used for synchronization.
Defines the path to the database file (database.txt).
write_to_database function:

Uses flock -x 200 to acquire an exclusive lock on the lock file with file descriptor 200.
If another process already holds the lock, the script will wait until it's released.
Prints a message indicating writing to the database.
Appends the provided data (including a timestamp) to the database file using >>.
Introduces a delay (sleep 2) to simulate a database write operation.
Uses flock -u 200 to release the lock on the lock file.
Prints a message indicating write completion.
read_from_database function:

Uses flock -s 200 to acquire a shared lock on the lock file with file descriptor 200.
This allows multiple reader processes to access the database concurrently.
Prints a message indicating reading from the database.
Reads the entire content of the database file using cat.
Introduces a delay (sleep 1) to simulate a database read operation.
Uses flock -u 200 to release the lock on the lock file.
Prints a message indicating read completion.
Simulating Writer Access:

Starts a background process (&) using a subshell ((...)).
Acquires an exclusive lock (flock -x 200) on the lock file to prevent concurrent writes.
Prints a message indicating a writer is requesting access.
Calls the write_to_database function to write a new entry with a timestamp to the database.
Simulating Reader Access:

Uses a loop to create five background processes (&) each.
Inside each loop iteration (representing a reader process):
Acquires a shared lock (flock -s 200) on the lock file, allowing concurrent reading.
Prints a message indicating a reader (with an ID) is requesting access.
Calls the read_from_database function to read the current database content.
Wait for Processes:

Uses wait to wait for all background processes (writer and readers) to finish.
Logical Schema:

+--------------------+      +--------------------+      +--------------------+
| Writer Process      | ----> | Database Lock File | ----> | Database File     |
+--------------------+      +--------------------+      +--------------------+
                   | (Exclusive Lock)        |                     |
                   v                          v                     v
               Request access               Acquire lock           Write to database
                                               Release lock
                                               Write complete

+--------------------+      +--------------------+      +--------------------+
| Reader Process 1   | ----> | Database Lock File | ----> | Database File     |
+--------------------+      +--------------------+      +--------------------+
                   | (Shared Lock)          |                     |
                   v                          v                     v
               Request access               Acquire lock           Read from database
                                               Release lock
                                               Read complete

+--------------------+      +--------------------+      +--------------------+
| Reader Process N   | ----> | Database Lock File | ----> | Database File     |
+--------------------+      +--------------------+      +--------------------+
                   | (Shared Lock)          |                     |
                   v                          v                     v
               Request access               Acquire lock           Read from database
                                               Release lock
                                               Read complete
Explanation (Continued):

The flock command with different options (-x for exclusive lock and -s for shared lock) ensures only one process can write to the database at a time while allowing multiple readers to access the data concurrently. This prevents data corruption due to simultaneous modifications.
The script simulates database operations with delays to demonstrate the locking mechanism. In a real scenario, the delays would be replaced with actual database access calls or interactions with a database management system.
By using background processes for both writer and reader simulations, we showcase how multiple processes can contend for access to the database file while maintaining data integrity through proper locking.
TODO:

Explore alternative synchronization mechanisms like semaphores or mutexes for potentially more efficient or scalable access management compared to file locking (especially for large-scale systems).
Implement error handling to gracefully handle situations where lock acquisition fails or processes encounter unexpected issues.
Consider using a dedicated locking library for advanced locking functionalities beyond basic file locking offered by flock.
Enhance the simulation by adding functionalities like deleting entries from the database and introducing potential conflicts between reader and writer processes.
This script provides a basic introduction to file locking for managing concurrent access to shared resources like databases in Bash. By understanding these concepts, you can build more robust systems that ensure data consistency and prevent issues arising from race conditions.